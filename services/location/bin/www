#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('location:server');
var http = require('http');
//const redis = require('redis'), client = redis.createClient();

//client.on('connect', ()=>console.log('Redis Connected!'));
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
server.listen(port);
var io = require('socket.io')(server, { origins: '*:*'});;

/**
 * Listen on provided port, on all network interfaces.
 */



io.on('connection', (socket) => {
  io.clients((error, clients) => {
    if (error) throw error;
    console.log('Serving: ', clients)
  });

  
  socket.on('elecPosition', (electrician) => {
    console.log("Electrician Found!");
    let elec = JSON.parse(electrician);
  //  client.set(elec.electrician._id, electrician, ()=>{
      io.sockets.emit('otherElecPositions', electrician);
  //  });
    // client.get(elec.electrician._id,(error, result)=>{
    //   if(error){
    //     console.log("Something went wrong")
    //   }
    //   var res = JSON.parse(result);
    //   if(res == null) {
    //     console.log("Caching it!")
    //     client.set(elec.electrician._id, JSON.stringify(elec.coords));
    //     io.sockets.emit('otherElecPositions', electrician);
    //   }
    //   else if(res.latitude !== elec.coords.latitude && res.longitude !== elec.coords.longitude){
    //     console.log("Updating cache!");
    //     client.set(elec.electrician._id, JSON.stringify(elec.coords));
    //     io.sockets.emit('otherElecPositions', electrician);
    //   }
    // })
  });

  socket.on('logoff', (id)=>{
    console.log("Logging off");
  })

  socket.on('userPosition', (position) => { 
    console.log("UserPositionReceived!")
    var parsed = JSON.parse(position);
    console.log(parsed);
    io.sockets.emit(parsed.elecId, position);
  })

  socket.on('disconnect', (client) => { 
    console.log(client," Disconnected!")
  })

});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
